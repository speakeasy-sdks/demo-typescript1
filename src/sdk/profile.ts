/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Profile extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Profile tabular data
     *
     * @remarks
     * Profile tabular data. The Swagger UI isn't able to call this currently.
     *
     * ## Sample curl request:
     *
     * ```bash
     * curl -X 'POST'         -H "X-API-Key: <password>"         -H "Content-Type: application/json"         'http://localhost:8000/log'         --data-raw '{
     *     "datasetId": "model-62",
     *     "multiple": {
     *         "columns": [ "age", "workclass", "fnlwgt", "education" ],
     *         "data": [
     *             [ 25, "Private", 226802, "11th" ]
     *         ]
     *     }
     * }'
     * ```
     * ## Sample Python client request:
     * ```python
     * from whylogs_container_client import AuthenticatedClient
     * import whylogs_container_client.api.profile.log as Log
     * from whylogs_container_client.models import LogRequest, LogMultiple
     * from datetime import datetime
     *
     * client = AuthenticatedClient(base_url="http://localhost:8000", token="password", prefix="", auth_header_name="X-API-Key")
     *
     * data = LogRequest(
     *     dataset_id="model-1",
     *     timestamp=int(datetime.now().timestamp() * 1000),
     *     multiple=LogMultiple(
     *         columns=["col1", "col2"],
     *         data=[[1, 2], [3, 4]],
     *     )
     * )
     *
     * response = Log.sync_detailed(client=client, json_body=data)
     * if response.status_code != 200:
     *     raise Exception(f"Failed to log data. Status code: {response.status_code}")
     * # API is async, it won't fail and has no return body
     * ```
     *
     * ## Sample Python request (using `requests`):
     * ```python
     * import requests
     *
     * # Define your API key
     * api_key = "<password>"
     *
     * # API endpoint
     * url = 'http://localhost:8000/log'
     *
     * # Sample data
     * data = {
     *     "datasetId": "model-62",
     *     "multiple": {
     *         "columns": ["age", "workclass", "fnlwgt", "education"],
     *         "data": [
     *             [25, "Private", 226802, "11th"]
     *         ]
     *     }
     * }
     *
     * # Make the POST request
     * headers = {"X-API-Key": api_key}
     * response = requests.post(url, json=data, headers=headers)
     * ```
     */
    async log(
        input: components.LogRequest,
        options?: RequestOptions
    ): Promise<operations.LogResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) => components.LogRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/log")();

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "log",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["422", "4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.LogResponse$.inboundSchema.parse({
                        ...responseFields$,
                        any: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else if (this.matchResponse(response, 422, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.HTTPValidationError$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else {
            throw new errors.SDKError("Unexpected API response", { response, request });
        }
    }

    /**
     * Profile embeddings
     *
     * @remarks
     * This endpoint requires a custom configuration to set up before hand. See https://docs.whylabs.ai/docs/integrations-whylogs-container/
     * for setting up embeddings support.
     *
     * Log embeddings data. The Swagger UI isn't able to call this currently.
     *
     * ## Sample curl request:
     *
     * ```bash
     * curl -X 'POST'         -H "X-API-Key: <password>"         -H "Content-Type: application/octet-stream"         'http://localhost:8000/log-embeddings'         --data-raw '{
     *     "datasetId": "model-62",
     *     "timestamp": 1634235000,
     *     "embeddings": {
     *         "embeddings": [[0.12, 0.45, 0.33, 0.92]]
     *     }
     * }'
     * ```
     *
     * ## Sample Python request (using `requests`):
     * ```python
     * import requests
     *
     * # Define your API key
     * api_key = "<password>"
     *
     * # API endpoint
     * url = 'http://localhost:8000/log-embeddings'
     *
     * # Sample data
     * data = {
     *     "datasetId": "model-62",
     *     "timestamp": 1634235000,  # an example timestamp
     *     "embeddings": {
     *         "embeddings": [[0.12, 0.45, 0.33, 0.92]]
     *     }
     * }
     *
     * # Make the POST request
     * headers = {"X-API-Key": api_key, "Content-Type": "application/octet-stream"}
     * response = requests.post(url, json=data, headers=headers)
     * ```
     */
    async logEmbeddings(
        input: components.LogEmbeddingRequest,
        options?: RequestOptions
    ): Promise<operations.LogEmbeddingsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) => components.LogEmbeddingRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/log-embeddings")();

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "log_embeddings",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["422", "4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.LogEmbeddingsResponse$.inboundSchema.parse({
                        ...responseFields$,
                        any: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else if (this.matchResponse(response, 422, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return errors.HTTPValidationError$.inboundSchema.parse({
                        ...responseFields$,
                        ...val$,
                    });
                },
                "Response validation failed"
            );
            throw result;
        } else {
            throw new errors.SDKError("Unexpected API response", { response, request });
        }
    }

    /**
     * Log Pubsub
     */
    async logPubsub(options?: RequestOptions): Promise<operations.LogPubsubResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/log-pubsub")();

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "log_pubsub",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.LogPubsubResponse$.inboundSchema.parse({
                        ...responseFields$,
                        any: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            throw new errors.SDKError("Unexpected API response", { response, request });
        }
    }

    /**
     * Log Pubsub Embeddings
     */
    async logPubsubEmbedding(
        options?: RequestOptions
    ): Promise<operations.LogPubsubEmbeddingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/log-pubsub-embeddings")();

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "log_pubsub_embedding",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.LogPubsubEmbeddingResponse$.inboundSchema.parse({
                        ...responseFields$,
                        any: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            throw new errors.SDKError("Unexpected API response", { response, request });
        }
    }
}
