/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ValidationResultData = {
    report?: Array<components.ValidationFailure> | undefined;
};

export class ValidationResult extends Error {
    report?: Array<components.ValidationFailure> | undefined;

    /** The original data that was passed to this error instance. */
    data$: ValidationResultData;

    constructor(err: ValidationResultData) {
        super("");
        this.data$ = err;

        if (err.report != null) {
            this.report = err.report;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ValidationResult";
    }
}

/** @internal */
export namespace ValidationResult$ {
    export type Inbound = {
        report?: Array<components.ValidationFailure$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ValidationResult, z.ZodTypeDef, Inbound> = z
        .object({
            report: z.array(components.ValidationFailure$.inboundSchema).optional(),
        })
        .transform((v) => {
            return new ValidationResult({
                ...(v.report === undefined ? null : { report: v.report }),
            });
        });

    export type Outbound = {
        report?: Array<components.ValidationFailure$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ValidationResult> = z
        .instanceof(ValidationResult)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    report: z.array(components.ValidationFailure$.outboundSchema).optional(),
                })
                .transform((v) => {
                    return {
                        ...(v.report === undefined ? null : { report: v.report }),
                    };
                })
        );
}
