/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { ValidationResult } from "./validationresult";
import * as z from "zod";

export type Metrics = {};

export type FailedEvaluationResultData = {
    metrics: Array<Metrics>;
    validationResults: ValidationResult;
    perfInfo: components.RunPerf | null;
};

export class FailedEvaluationResult extends Error {
    metrics: Array<Metrics>;
    validationResults: ValidationResult;
    perfInfo: components.RunPerf | null;

    /** The original data that was passed to this error instance. */
    data$: FailedEvaluationResultData;

    constructor(err: FailedEvaluationResultData) {
        super("");
        this.data$ = err;

        this.metrics = err.metrics;
        this.validationResults = err.validationResults;
        this.perfInfo = err.perfInfo;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "FailedEvaluationResult";
    }
}

/** @internal */
export namespace Metrics$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Metrics> = z.object({});
}

/** @internal */
export namespace FailedEvaluationResult$ {
    export type Inbound = {
        metrics: Array<Metrics$.Inbound>;
        validation_results: ValidationResult$.Inbound;
        perf_info: components.RunPerf$.Inbound | null;
    };

    export const inboundSchema: z.ZodType<FailedEvaluationResult, z.ZodTypeDef, Inbound> = z
        .object({
            metrics: z.array(z.lazy(() => Metrics$.inboundSchema)),
            validation_results: ValidationResult$.inboundSchema,
            perf_info: z.nullable(components.RunPerf$.inboundSchema),
        })
        .transform((v) => {
            return new FailedEvaluationResult({
                metrics: v.metrics,
                validationResults: v.validation_results,
                perfInfo: v.perf_info,
            });
        });
    export type Outbound = {
        metrics: Array<Metrics$.Outbound>;
        validation_results: ValidationResult$.Outbound;
        perf_info: components.RunPerf$.Outbound | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FailedEvaluationResult> = z
        .instanceof(FailedEvaluationResult)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    metrics: z.array(z.lazy(() => Metrics$.outboundSchema)),
                    validationResults: ValidationResult$.outboundSchema,
                    perfInfo: z.nullable(components.RunPerf$.outboundSchema),
                })
                .transform((v) => {
                    return {
                        metrics: v.metrics,
                        validation_results: v.validationResults,
                        perf_info: v.perfInfo,
                    };
                })
        );
}
