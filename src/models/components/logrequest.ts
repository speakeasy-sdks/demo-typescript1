/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LogMultiple, LogMultiple$ } from "./logmultiple";
import * as z from "zod";

export type LogRequest = {
    datasetId: string;
    multiple: LogMultiple;
    timestamp?: number | null | undefined;
};

/** @internal */
export namespace LogRequest$ {
    export type Inbound = {
        datasetId: string;
        multiple: LogMultiple$.Inbound;
        timestamp?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<LogRequest, z.ZodTypeDef, Inbound> = z
        .object({
            datasetId: z.string(),
            multiple: LogMultiple$.inboundSchema,
            timestamp: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                datasetId: v.datasetId,
                multiple: v.multiple,
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        datasetId: string;
        multiple: LogMultiple$.Outbound;
        timestamp?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LogRequest> = z
        .object({
            datasetId: z.string(),
            multiple: LogMultiple$.outboundSchema,
            timestamp: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                datasetId: v.datasetId,
                multiple: v.multiple,
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}
