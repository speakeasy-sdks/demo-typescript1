/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Data =
    | string
    | number
    | number
    | boolean
    | Array<number>
    | Array<number>
    | Array<string>;

export type LogMultiple = {
    columns: Array<string>;
    data: Array<
        Array<string | number | number | boolean | Array<number> | Array<number> | Array<string>>
    >;
};

/** @internal */
export namespace Data$ {
    export type Inbound =
        | string
        | number
        | number
        | boolean
        | Array<number>
        | Array<number>
        | Array<string>;

    export type Outbound =
        | string
        | number
        | number
        | boolean
        | Array<number>
        | Array<number>
        | Array<string>;

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z.union([
        z.string(),
        z.number().int(),
        z.number(),
        z.boolean(),
        z.array(z.number()),
        z.array(z.number().int()),
        z.array(z.string()),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z.union([
        z.string(),
        z.number().int(),
        z.number(),
        z.boolean(),
        z.array(z.number()),
        z.array(z.number().int()),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace LogMultiple$ {
    export type Inbound = {
        columns: Array<string>;
        data: Array<
            Array<
                string | number | number | boolean | Array<number> | Array<number> | Array<string>
            >
        >;
    };

    export const inboundSchema: z.ZodType<LogMultiple, z.ZodTypeDef, Inbound> = z
        .object({
            columns: z.array(z.string()),
            data: z.array(
                z.array(
                    z.union([
                        z.string(),
                        z.number().int(),
                        z.number(),
                        z.boolean(),
                        z.array(z.number()),
                        z.array(z.number().int()),
                        z.array(z.string()),
                    ])
                )
            ),
        })
        .transform((v) => {
            return {
                columns: v.columns,
                data: v.data,
            };
        });

    export type Outbound = {
        columns: Array<string>;
        data: Array<
            Array<
                string | number | number | boolean | Array<number> | Array<number> | Array<string>
            >
        >;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LogMultiple> = z
        .object({
            columns: z.array(z.string()),
            data: z.array(
                z.array(
                    z.union([
                        z.string(),
                        z.number().int(),
                        z.number(),
                        z.boolean(),
                        z.array(z.number()),
                        z.array(z.number().int()),
                        z.array(z.string()),
                    ])
                )
            ),
        })
        .transform((v) => {
            return {
                columns: v.columns,
                data: v.data,
            };
        });
}
