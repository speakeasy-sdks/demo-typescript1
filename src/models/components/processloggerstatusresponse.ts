/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LoggerStatusResponse, LoggerStatusResponse$ } from "./loggerstatusresponse";
import * as z from "zod";

export type ProcessLoggerStatusResponse = {
    version: string;
    statuses: Record<string, LoggerStatusResponse>;
};

/** @internal */
export namespace ProcessLoggerStatusResponse$ {
    export type Inbound = {
        version: string;
        statuses: Record<string, LoggerStatusResponse$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ProcessLoggerStatusResponse, z.ZodTypeDef, Inbound> = z
        .object({
            version: z.string(),
            statuses: z.record(LoggerStatusResponse$.inboundSchema),
        })
        .transform((v) => {
            return {
                version: v.version,
                statuses: v.statuses,
            };
        });

    export type Outbound = {
        version: string;
        statuses: Record<string, LoggerStatusResponse$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProcessLoggerStatusResponse> = z
        .object({
            version: z.string(),
            statuses: z.record(LoggerStatusResponse$.outboundSchema),
        })
        .transform((v) => {
            return {
                version: v.version,
                statuses: v.statuses,
            };
        });
}
