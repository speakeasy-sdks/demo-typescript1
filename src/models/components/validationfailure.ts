/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Value = number | number | string;

export type AllowedValues = string | number | number;

export type DisallowedValues = string | number | number;

export type ValidationFailure = {
    id: string;
    metric: string;
    details: string;
    value: number | number | string | null;
    upperThreshold?: number | null | undefined;
    lowerThreshold?: number | null | undefined;
    allowedValues?: Array<string | number | number> | null | undefined;
    disallowedValues?: Array<string | number | number> | null | undefined;
    mustBeNone?: boolean | null | undefined;
    mustBeNonNone?: boolean | null | undefined;
};

/** @internal */
export namespace Value$ {
    export type Inbound = number | number | string;

    export type Outbound = number | number | string;

    export const inboundSchema: z.ZodType<Value, z.ZodTypeDef, Inbound> = z.union([
        z.number().int(),
        z.number(),
        z.string(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Value> = z.union([
        z.number().int(),
        z.number(),
        z.string(),
    ]);
}

/** @internal */
export namespace AllowedValues$ {
    export type Inbound = string | number | number;

    export type Outbound = string | number | number;

    export const inboundSchema: z.ZodType<AllowedValues, z.ZodTypeDef, Inbound> = z.union([
        z.string(),
        z.number(),
        z.number().int(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AllowedValues> = z.union([
        z.string(),
        z.number(),
        z.number().int(),
    ]);
}

/** @internal */
export namespace DisallowedValues$ {
    export type Inbound = string | number | number;

    export type Outbound = string | number | number;

    export const inboundSchema: z.ZodType<DisallowedValues, z.ZodTypeDef, Inbound> = z.union([
        z.string(),
        z.number(),
        z.number().int(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DisallowedValues> = z.union([
        z.string(),
        z.number(),
        z.number().int(),
    ]);
}

/** @internal */
export namespace ValidationFailure$ {
    export type Inbound = {
        id: string;
        metric: string;
        details: string;
        value: number | number | string | null;
        upper_threshold?: number | null | undefined;
        lower_threshold?: number | null | undefined;
        allowed_values?: Array<string | number | number> | null | undefined;
        disallowed_values?: Array<string | number | number> | null | undefined;
        must_be_none?: boolean | null | undefined;
        must_be_non_none?: boolean | null | undefined;
    };

    export const inboundSchema: z.ZodType<ValidationFailure, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            metric: z.string(),
            details: z.string(),
            value: z.nullable(z.union([z.number().int(), z.number(), z.string()])),
            upper_threshold: z.nullable(z.number()).optional(),
            lower_threshold: z.nullable(z.number()).optional(),
            allowed_values: z
                .nullable(z.array(z.union([z.string(), z.number(), z.number().int()])))
                .optional(),
            disallowed_values: z
                .nullable(z.array(z.union([z.string(), z.number(), z.number().int()])))
                .optional(),
            must_be_none: z.nullable(z.boolean()).optional(),
            must_be_non_none: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                metric: v.metric,
                details: v.details,
                value: v.value,
                ...(v.upper_threshold === undefined ? null : { upperThreshold: v.upper_threshold }),
                ...(v.lower_threshold === undefined ? null : { lowerThreshold: v.lower_threshold }),
                ...(v.allowed_values === undefined ? null : { allowedValues: v.allowed_values }),
                ...(v.disallowed_values === undefined
                    ? null
                    : { disallowedValues: v.disallowed_values }),
                ...(v.must_be_none === undefined ? null : { mustBeNone: v.must_be_none }),
                ...(v.must_be_non_none === undefined
                    ? null
                    : { mustBeNonNone: v.must_be_non_none }),
            };
        });

    export type Outbound = {
        id: string;
        metric: string;
        details: string;
        value: number | number | string | null;
        upper_threshold?: number | null | undefined;
        lower_threshold?: number | null | undefined;
        allowed_values?: Array<string | number | number> | null | undefined;
        disallowed_values?: Array<string | number | number> | null | undefined;
        must_be_none?: boolean | null | undefined;
        must_be_non_none?: boolean | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ValidationFailure> = z
        .object({
            id: z.string(),
            metric: z.string(),
            details: z.string(),
            value: z.nullable(z.union([z.number().int(), z.number(), z.string()])),
            upperThreshold: z.nullable(z.number()).optional(),
            lowerThreshold: z.nullable(z.number()).optional(),
            allowedValues: z
                .nullable(z.array(z.union([z.string(), z.number(), z.number().int()])))
                .optional(),
            disallowedValues: z
                .nullable(z.array(z.union([z.string(), z.number(), z.number().int()])))
                .optional(),
            mustBeNone: z.nullable(z.boolean()).optional(),
            mustBeNonNone: z.nullable(z.boolean()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                metric: v.metric,
                details: v.details,
                value: v.value,
                ...(v.upperThreshold === undefined ? null : { upper_threshold: v.upperThreshold }),
                ...(v.lowerThreshold === undefined ? null : { lower_threshold: v.lowerThreshold }),
                ...(v.allowedValues === undefined ? null : { allowed_values: v.allowedValues }),
                ...(v.disallowedValues === undefined
                    ? null
                    : { disallowed_values: v.disallowedValues }),
                ...(v.mustBeNone === undefined ? null : { must_be_none: v.mustBeNone }),
                ...(v.mustBeNonNone === undefined ? null : { must_be_non_none: v.mustBeNonNone }),
            };
        });
}
