/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type LoggerStatusResponse = {
    datasetTimestamps: number;
    datasetProfiles: number;
    segmentCaches: number;
    writers: number;
    pendingWritables: number;
    pendingViews: Array<string>;
    views: Array<string>;
};

/** @internal */
export namespace LoggerStatusResponse$ {
    export type Inbound = {
        dataset_timestamps: number;
        dataset_profiles: number;
        segment_caches: number;
        writers: number;
        pending_writables: number;
        pending_views: Array<string>;
        views: Array<string>;
    };

    export const inboundSchema: z.ZodType<LoggerStatusResponse, z.ZodTypeDef, Inbound> = z
        .object({
            dataset_timestamps: z.number().int(),
            dataset_profiles: z.number().int(),
            segment_caches: z.number().int(),
            writers: z.number().int(),
            pending_writables: z.number().int(),
            pending_views: z.array(z.string()),
            views: z.array(z.string()),
        })
        .transform((v) => {
            return {
                datasetTimestamps: v.dataset_timestamps,
                datasetProfiles: v.dataset_profiles,
                segmentCaches: v.segment_caches,
                writers: v.writers,
                pendingWritables: v.pending_writables,
                pendingViews: v.pending_views,
                views: v.views,
            };
        });

    export type Outbound = {
        dataset_timestamps: number;
        dataset_profiles: number;
        segment_caches: number;
        writers: number;
        pending_writables: number;
        pending_views: Array<string>;
        views: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoggerStatusResponse> = z
        .object({
            datasetTimestamps: z.number().int(),
            datasetProfiles: z.number().int(),
            segmentCaches: z.number().int(),
            writers: z.number().int(),
            pendingWritables: z.number().int(),
            pendingViews: z.array(z.string()),
            views: z.array(z.string()),
        })
        .transform((v) => {
            return {
                dataset_timestamps: v.datasetTimestamps,
                dataset_profiles: v.datasetProfiles,
                segment_caches: v.segmentCaches,
                writers: v.writers,
                pending_writables: v.pendingWritables,
                pending_views: v.pendingViews,
                views: v.views,
            };
        });
}
