/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type LogEmbeddingRequest = {
    datasetId: string;
    timestamp: number;
    embeddings: Record<string, Array<Array<number>>>;
};

/** @internal */
export namespace LogEmbeddingRequest$ {
    export type Inbound = {
        dataset_id: string;
        timestamp: number;
        embeddings: Record<string, Array<Array<number>>>;
    };

    export const inboundSchema: z.ZodType<LogEmbeddingRequest, z.ZodTypeDef, Inbound> = z
        .object({
            dataset_id: z.string(),
            timestamp: z.number().int(),
            embeddings: z.record(z.array(z.array(z.number()))),
        })
        .transform((v) => {
            return {
                datasetId: v.dataset_id,
                timestamp: v.timestamp,
                embeddings: v.embeddings,
            };
        });

    export type Outbound = {
        dataset_id: string;
        timestamp: number;
        embeddings: Record<string, Array<Array<number>>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LogEmbeddingRequest> = z
        .object({
            datasetId: z.string(),
            timestamp: z.number().int(),
            embeddings: z.record(z.array(z.array(z.number()))),
        })
        .transform((v) => {
            return {
                dataset_id: v.datasetId,
                timestamp: v.timestamp,
                embeddings: v.embeddings,
            };
        });
}
