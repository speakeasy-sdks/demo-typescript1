/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ListMetricsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful Response
     */
    availableMetrics?: components.AvailableMetrics | undefined;
};

/** @internal */
export namespace ListMetricsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AvailableMetrics?: components.AvailableMetrics$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListMetricsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AvailableMetrics: components.AvailableMetrics$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AvailableMetrics === undefined
                    ? null
                    : { availableMetrics: v.AvailableMetrics }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AvailableMetrics?: components.AvailableMetrics$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListMetricsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            availableMetrics: components.AvailableMetrics$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.availableMetrics === undefined
                    ? null
                    : { AvailableMetrics: v.availableMetrics }),
            };
        });
}
